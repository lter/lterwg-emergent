table,fieldName,description,dataType,units,parserToCreate,entryValidationRulesParser,entryValidationRulesForm
sls_soilCoreCollection,uid,"Unique ID within NEON database; an identifier for the record",string,NA,"[CREATE_UID]",,
sls_soilCoreCollection,plotID,"Plot identifier (NEON site code_XXX)",string,NA,,"[NAMED_LOCATION_TYPE('OS Plot - bgc')]","[REQUIRE][NAMED_LOCATION_TYPE('OS plot - bgc')]"
sls_soilCoreCollection,nTransBoutType,"Category of bout in relation to nitrogen transformation sample collection",string,NA,,"[LOV]","[REQUIRE][LOV][SUGGESTED_ENTRY(previousValue)]"
sls_soilCoreCollection,samplingImpractical,"Samples and/or measurements were not collected due to the indicated circumstance",string,NA,,"[LOV]","[REQUIRE][LOV][SUGGESTED_ENTRY('OK')]"
sls_soilCoreCollection,incubationMethod,"Method used for soil incubation",string,NA,,"[LOV]","[REQUIRE][LOV][IF(nTransBoutType != 'Tfinal'), DEFAULT_TO('no incubation')][IF(samplingImpractical != 'OK'), REQUIRE_NULL]"
sls_soilCoreCollection,incubationCondition,"Condition of incubated nitrogen transformation sample upon retrieval",string,NA,,"[LOV]","[LOV][IF(nTransBoutType != 'Tfinal'), HIDDEN)][IF(samplingImpractical != 'OK'), REQUIRE_NULL]"
sls_soilCoreCollection,boutType,"Type of analyses that will be conducted on samples collected during the bout",string,NA,,"[LOV]","[REQUIRE][LOV][SUGGESTED_ENTRY(previousValue)]"
sls_soilCoreCollection,sampleTiming,"Timing of the sampling event with regard to the field season",string,NA,,"[LOV]","[REQUIRE][LOV][SUGGESTED_ENTRY(previousValue)]"
sls_soilCoreCollection,eventID,"An identifier for the set of information associated with the event, which includes information about the place and time of the event",string,NA,,"[ASCII]","[EQUALS(siteID+'.'+sampleTiming+'.'+collectDate)]"
sls_soilCoreCollection,biophysicalCriteria,"An indicator of whether sampling coincided with the intended biophysical conditions",string,NA,,"[LOV]","[LOV][IF(samplingImpractical = 'OK'), REQUIRE]"
sls_soilCoreCollection,standingWaterDepth,"Depth of standing water present at a sampling location",real,centimeter,,"[GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(300)]","[IF(samplingImpractical = 'OK'), REQUIRE][SUGGESTED_ENTRY(0)][GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(100)]"
sls_soilCoreCollection,subplotID,"Identifier for the NEON subplot",string,NA,,"[LOV]","[LOV][IF(samplingImpractical = 'OK'), REQUIRE]"
sls_soilCoreCollection,coreCoordinateX,"x location of the soil core relative to the SW corner",real,meter,,"[GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(40)]","[IF(samplingImpractical = 'OK'), REQUIRE][GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(40)]"
sls_soilCoreCollection,coreCoordinateY,"y location of the soil core relative to the SW corner",real,meter,,"[GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(40)]","[IF(samplingImpractical = 'OK'), REQUIRE][GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(40)]"
sls_soilCoreCollection,setDate,"Date that trap was set",dateTime,NA,"[CONVERT_TO_UTC(namedLocation)]",,"[IF(nTransBoutType != 'Tfinal'), DEFAULT_TO('collectDate')]"
sls_soilCoreCollection,collectDate,"Date of the collection event",dateTime,NA,"[CONVERT_TO_UTC(namedLocation)]",,"[DATE_FORMAT(YYYYMMDDTHH:MM)]"
sls_soilCoreCollection,toxicodendronPossible,"Indicator for whether a sample may contain Toxicodendron spp",string,NA,,"[LOV]","[LOV][IF(samplingImpractical != 'OK'), REQUIRE_NULL]"
sls_soilCoreCollection,soilTemp,"In-situ temperature of soil at approximately 10 cm depth",real,degree,,"[GREATER_THAN_OR_EQUAL_TO(20-)][LESS_THAN_OR_EQUAL_TO(40)]","[IF(standingWaterDepth=0),REQUIRE][IF(sampleFate !='lost), REQUIRE][GREATER_THAN_OR_EQUAL_TO(-20)][LESS_THAN_OR_EQUAL_TO(40)]"
sls_soilCoreCollection,litterDepth,"Depth of litter layer",real,centimeter,,"[GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(1000)]","[IF(standingWaterDepth=0),REQUIRE][IF(sampleFate !='lost), REQUIRE][GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(500)]"
sls_soilCoreCollection,sampleTopDepth,"Depth below the soil surface of the top of a soil sample",real,centimeter,,"[GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(100)]","[IF(sampleFate !='lost), REQUIRE][GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(100)]"
sls_soilCoreCollection,sampleBottomDepth,"Depth below the soil surface of the bottom of a soil sample",real,centimeter,,"[GREATER_THAN_OR_EQUAL_TO(sampleTopDepth)][LESS_THAN_OR_EQUAL_TO(100)]","[IF(sampleFate !='lost), REQUIRE][GREATER_THAN_OR_EQUAL_TO('sampleTopDepth')][LESS_THAN_OR_EQUAL_TO(100)]"
sls_soilCoreCollection,horizon,"Organic or mineral soil",string,NA,,"[LOV]","[LOV][IF(samplingImpractical = 'OK'), REQUIRE]"
sls_soilCoreCollection,sampleID,"Identifier for sample",string,NA,,"[DOES_NOT_EXIST][IF(samplingImpractical='OK'), MATCH_REGULAR_EXPRESSION('[A-Z]{4}_[0-9]{3}-[M|O]')][IF(samplingImpractical='OK'), MATCH_REGULAR_EXPRESSION('-+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)')][MATCH_REGULAR_EXPRESSION('20[0-9]{2}(0[1-9]|1[012])(0[1-9]|1[0-9]|2[0-9]|3[01])')]","[IF(samplingImpractical = 'OK'), DEFAULT_TO(plotID + horizon + coreCoordinateX + coreCoordinateY + collectDate)]"
sls_soilCoreCollection,sampleFate,"Fate of a sample",string,NA,,"[LOV]","[IF(nTransBoutType != 'Tfinal'), HIDDEN)][LOV('active', 'lost')][IF(nTransBoutType = 'Tfinal', SUGGESTED_ENTRY('active')]"
sls_soilCoreCollection,sampleCode,"Barcode of a sample",string,NA,,"[ASCII]",
sls_soilCoreCollection,soilSamplingDevice,"Type of soil collection device used for sampling",string,NA,,"[LOV]","[LOV][IF(samplingImpractical = 'OK'), WARN]"
sls_soilCoreCollection,soilCoreCount,"Number of soil cores combined per sample",unsigned integer,number,,"[GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(10)]","[IF(samplingImpractical = 'OK'), WARN][IF(samplingImpractical != 'OK'), REQUIRE_NULL][GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(10)]"
sls_soilCoreCollection,sampleExtent,"Extent of the soil sample relative to the local soil horizon conditions",string,NA,,"[LOV]","[LOV][IF(samplingImpractical = 'OK'), WARN]"
sls_soilCoreCollection,samplingProtocolVersion,"The NEON document number and version where detailed information regarding the sampling method used is available; format NEON.DOC.######vX",string,NA,,"[LOV]","[LOV][IF(samplingImpractical = 'OK'), REQUIRE][SUGGESTED_ENTRY(previousValue)]"
sls_soilCoreCollection,geneticSampleCondition,"Condition of genetic sample storage or processing",string,NA,,"[LOV]","[IF(boutType='microbes' AND samplingImpractical='OK'), REQUIRE][IF(boutType='microbesBGC' AND samplingImpractical='OK'), REQUIRE][IF(boutType='microbesBiomass' AND samplingImpractical='OK', REQUIRE][IF(boutType='microbesBiomassBGC' AND samplingImpractical='OK'), REQUIRE][LOV][IF(samplingImpractical!='OK', DEFAULT_TO(NULL))][SUGGESTED_ENTRY('OK')]"
sls_soilCoreCollection,geneticSampleID,"Identifier for the genetic sample",string,NA,,"[DOES_NOT_EXIST][MATCH_REGULAR_EXPRESSION('[A-Z]{4}_[0-9]{3}-[M|O]')][MATCH_REGULAR_EXPRESSION('-+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)')][MATCH_REGULAR_EXPRESSION('20[0-9]{2}(0[1-9]|1[012])(0[1-9]|1[0-9]|2[0-9]|3[01])-(?i)gen')]","[IF(boutType != 'biogeochemistry | field only' AND samplingImpractical = 'OK'), REQUIRE][IF(samplingImpractical!='OK', DEFAULT_TO(NULL))][EQUALS(sampleID + '-gen')]"
sls_soilCoreCollection,geneticSampleFate,"Fate of a genetic sample",string,NA,,"[IF (IS_NOT_BLANK(geneticSampleID)), REQUIRE][LOV]","[IF (IS_NOT_BLANK(geneticSampleID)), REQUIRE][IF(samplingImpractical!='OK', DEFAULT_TO(NULL))][SUGGESTED_ENTRY('active')][LOV('active','lost')]"
sls_soilCoreCollection,geneticSampleCode,"Barcode of a genetic sample",string,NA,,"[ASCII]",
sls_soilCoreCollection,geneticArchiveSampleCount,"Number of subsamples collected for genetic archive",integer,number,,"[GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(5)]","[IF(boutType='microbes' AND samplingImpractical = 'OK'), REQUIRE][IF(boutType='microbesBGC' AND samplingImpractical = 'OK'), REQUIRE][IF(boutType='microbesBiomass' AND samplingImpractical = 'OK'), REQUIRE][IF(boutType='microbesBiomassBGC' AND samplingImpractical = 'OK'), REQUIRE][IF(samplingImpractical!='OK', DEFAULT_TO(NULL))][GREATER_THAN_OR_EQUAL_TO(1)][LESS_THAN_OR_EQUAL_TO(5)]"
sls_soilCoreCollection,geneticArchiveSample1ID,"Identifier for genetic archive subsample 1",string,NA,,"[DOES_NOT_EXIST][MATCH_REGULAR_EXPRESSION('[A-Z]{4}_[0-9]{3}-[M|O]')][MATCH_REGULAR_EXPRESSION('-+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)')][MATCH_REGULAR_EXPRESSION('20[0-9]{2}(0[1-9]|1[012])(0[1-9]|1[0-9]|2[0-9]|3[01])-(?i)ga1')]","[IF(geneticArchiveSampleCount >= 1), EQUALS(sampleID + '-ga1')][IF(samplingImpractical!='OK', DEFAULT_TO(NULL))]"
sls_soilCoreCollection,geneticArchiveSample1Fate,"Fate of genetic archive subsample 1",string,NA,,"[IF (IS_NOT_BLANK(geneticArchiveSample1ID)), REQUIRE][LOV]","[IF(boutType='microbes | microbesBGC | microbesBiomass | microbesBiomassBGC' AND samplingImpractical = 'OK'), SUGGESTED_ENTRY('active')][IF(geneticArchiveSampleCount>=1), REQUIRE][IF(samplingImpractical!='OK', DEFAULT_TO(NULL))][LOV('active','lost','consumed')]"
sls_soilCoreCollection,geneticArchiveSample1Code,"Barcode of genetic archive subsample 1",string,NA,,"[ASCII]",
sls_soilCoreCollection,geneticArchiveSample2ID,"Identifier for genetic archive subsample 2",string,NA,,"[DOES_NOT_EXIST][MATCH_REGULAR_EXPRESSION('[A-Z]{4}_[0-9]{3}-[M|O]')][MATCH_REGULAR_EXPRESSION('-+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)')][MATCH_REGULAR_EXPRESSION('20[0-9]{2}(0[1-9]|1[012])(0[1-9]|1[0-9]|2[0-9]|3[01])-(?i)ga2')]","[IF(geneticArchiveSampleCount >= 2), EQUALS(sampleID + '-ga2')][IF(samplingImpractical!='OK', DEFAULT_TO(NULL))]"
sls_soilCoreCollection,geneticArchiveSample2Fate,"Fate of genetic archive subsample 2",string,NA,,"[IF (IS_NOT_BLANK(geneticArchiveSample2ID)), REQUIRE][LOV]","[IF(boutType='microbes | microbesBGC | microbesBiomass | microbesBiomassBGC' AND samplingImpractical = 'OK'), SUGGESTED_ENTRY('active')][IF(geneticArchiveSampleCount>=1), REQUIRE][IF(samplingImpractical!='OK', DEFAULT_TO(NULL))][LOV('active','lost','consumed')]"
sls_soilCoreCollection,geneticArchiveSample2Code,"Barcode of genetic archive subsample 2",string,NA,,"[ASCII]",
sls_soilCoreCollection,geneticArchiveSample3ID,"Identifier for genetic archive subsample 3",string,NA,,"[DOES_NOT_EXIST][MATCH_REGULAR_EXPRESSION('[A-Z]{4}_[0-9]{3}-[M|O]')][MATCH_REGULAR_EXPRESSION('-+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)')][MATCH_REGULAR_EXPRESSION('20[0-9]{2}(0[1-9]|1[012])(0[1-9]|1[0-9]|2[0-9]|3[01])-(?i)ga3')]","[IF(geneticArchiveSampleCount >= 3), EQUALS(sampleID + '-ga3')][IF(samplingImpractical!='OK', DEFAULT_TO(NULL))]"
sls_soilCoreCollection,geneticArchiveSample3Fate,"Fate of genetic archive subsample 3",string,NA,,"[IF (IS_NOT_BLANK(geneticArchiveSample3ID)), REQUIRE][LOV]","[IF(boutType='microbes | microbesBGC | microbesBiomass | microbesBiomassBGC' AND samplingImpractical = 'OK'), SUGGESTED_ENTRY('active')][IF(geneticArchiveSampleCount>=1), REQUIRE][IF(samplingImpractical!='OK', DEFAULT_TO(NULL))][LOV('active','lost','consumed')]"
sls_soilCoreCollection,geneticArchiveSample3Code,"Barcode of genetic archive subsample 3",string,NA,,"[ASCII]",
sls_soilCoreCollection,geneticArchiveSample4ID,"Identifier for genetic archive subsample 4",string,NA,,"[DOES_NOT_EXIST][MATCH_REGULAR_EXPRESSION('[A-Z]{4}_[0-9]{3}-[M|O]')][MATCH_REGULAR_EXPRESSION('-+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)')][MATCH_REGULAR_EXPRESSION('20[0-9]{2}(0[1-9]|1[012])(0[1-9]|1[0-9]|2[0-9]|3[01])-(?i)ga4')]","[IF(geneticArchiveSampleCount >= 4), EQUALS(sampleID + '-ga4')][IF(samplingImpractical!='OK', DEFAULT_TO(NULL))]"
sls_soilCoreCollection,geneticArchiveSample4Fate,"Fate of genetic archive subsample 4",string,NA,,"[IF (IS_NOT_BLANK(geneticArchiveSample4ID)), REQUIRE][LOV]","[IF(boutType='microbes | microbesBGC | microbesBiomass | microbesBiomassBGC' AND samplingImpractical = 'OK'), SUGGESTED_ENTRY('active')][IF(geneticArchiveSampleCount>=1), REQUIRE][IF(samplingImpractical!='OK', DEFAULT_TO(NULL))][LOV('active','lost','consumed')]"
sls_soilCoreCollection,geneticArchiveSample4Code,"Barcode of genetic archive subsample 4",string,NA,,"[ASCII]",
sls_soilCoreCollection,geneticArchiveSample5ID,"Identifier for genetic archive subsample 5",string,NA,,"[DOES_NOT_EXIST][MATCH_REGULAR_EXPRESSION('[A-Z]{4}_[0-9]{3}-[M|O]')][MATCH_REGULAR_EXPRESSION('-+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)')][MATCH_REGULAR_EXPRESSION('20[0-9]{2}(0[1-9]|1[012])(0[1-9]|1[0-9]|2[0-9]|3[01])-(?i)ga5')]","[IF(geneticArchiveSampleCount >= 5), EQUALS(sampleID + '-ga5')][IF(samplingImpractical!='OK', DEFAULT_TO(NULL))]"
sls_soilCoreCollection,geneticArchiveSample5Fate,"Fate of genetic archive subsample 5",string,NA,,"[IF (IS_NOT_BLANK(geneticArchiveSample5ID)), REQUIRE][LOV]","[IF(boutType='microbes | microbesBGC | microbesBiomass | microbesBiomassBGC' AND samplingImpractical = 'OK'), SUGGESTED_ENTRY('active')][IF(geneticArchiveSampleCount>=1), REQUIRE][IF(samplingImpractical!='OK', DEFAULT_TO(NULL))][LOV('active','lost','consumed')]"
sls_soilCoreCollection,geneticArchiveSample5Code,"Barcode of genetic archive subsample 5",string,NA,,"[ASCII]",
sls_soilCoreCollection,biomassSampleCondition,"Condition of a biomass sample during storage or processing",string,NA,,"[LOV]","[LOV][IF(samplingImpractical = 'OK'), REQUIRE][IF(samplingImpractical != 'OK'), REQUIRE_NULL]"
sls_soilCoreCollection,biomassID,"Identifier for biomass sample",string,NA,,"[DOES_NOT_EXIST][MATCH_REGULAR_EXPRESSION('[A-Z]{4}_[0-9]{3}-[M|O]')][MATCH_REGULAR_EXPRESSION('-+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)')][MATCH_REGULAR_EXPRESSION('20[0-9]{2}(0[1-9]|1[012])(0[1-9]|1[0-9]|2[0-9]|3[01])-(?i)bm')]","[IF(boutType= 'microbesBiomass | microbesBiomassBGC'), REQUIRE][EQUALS(sampleID +'-bm')]"
sls_soilCoreCollection,biomassFate,"Fate of biomass sample",string,NA,,"[IF (IS_NOT_BLANK(biomassID)), REQUIRE][LOV]","[IF(boutype != 'microbesBiomass | microbesBiomassBGC', HIDDEN][LOV('active', 'lost')][IF(boutType= 'microbesBiomass |microbesBiomassBGC '), SUGGESTED_ENTRY('active')]"
sls_soilCoreCollection,biomassCode,"Barcode of biomass sample",string,NA,,"[ASCII]",
sls_soilCoreCollection,horizonDetails,"Qualifier for soil horizon designation",string,NA,,"[LOV]","[LOV][IF(samplingImpractical = 'OK'),REQUIRE][IF(samplingImpractical != 'OK'),REQUIRE_NULL]"
sls_soilCoreCollection,remarks,"Technician notes; free text comments accompanying the record",string,NA,,"[ASCII]","[ASCII]"
sls_soilCoreCollection,collectedBy,"An identifier for the technician who collected the sample or specimen",string,NA,,"[ASCII]","[FROM_PERSONNEL][SUGGESTED_ENTRY(previousValue)]"
sls_soilCoreCollection,recordedBy,"An identifier for the technician who recorded the data",string,NA,,"[ASCII]","[FROM_PERSONNEL][SUGGESTED_ENTRY(previousValue)]"
sls_soilCoreCollection,dataQF,"Data quality flag",string,NA,,"[ASCII]",
sls_metagenomicsPooling,uid,"Unique ID within NEON database; an identifier for the record",string,NA,"[CREATE_UID]",,
sls_metagenomicsPooling,plotID,"Plot identifier (NEON site code_XXX)",string,NA,"[DERIVE_FROM_SAMPLE_TREE('sls_soilCoreCollection_in.sampleID')]","[NAMED_LOCATION_TYPE('OS Plot - bgc')]","[REQUIRE]"
sls_metagenomicsPooling,horizon,"Organic or mineral soil",string,NA,,"[LOV]","[REQUIRE][LOV]"
sls_metagenomicsPooling,setDate,"Date that trap was set",dateTime,NA,"[DERIVE_FROM_SAMPLE_TREE('sls_soilCoreCollection_in.sampleID')]",,
sls_metagenomicsPooling,collectDate,"Date of the collection event",dateTime,NA,"[DERIVE_FROM_SAMPLE_TREE('sls_soilCoreCollection_in.sampleID')]",,
sls_metagenomicsPooling,eventID,"An identifier for the set of information associated with the event, which includes information about the place and time of the event",string,NA,,"[ASCII]","[EQUALS(siteID+'.'+sampleTiming+'.'+collectDate)]"
sls_metagenomicsPooling,samplingProtocolVersion,"The NEON document number and version where detailed information regarding the sampling method used is available; format NEON.DOC.######vX",string,NA,,"[LOV]","[REQUIRE][LOV]"
sls_metagenomicsPooling,toCompositeSampleIDList,"List of composite identifiers in a pooled sample",string,NA,"[SPLIT_BY('|')]","[EXISTS]","[REQUIRE]"
sls_metagenomicsPooling,toCompositeFateList,"List of fates of composite samples in a pooled sample",string,NA,"[SPLIT_BY('|')]","[ASCII]","[HIDDEN][DEFAULT_TO('processed')]"
sls_metagenomicsPooling,toCompositeBarcodeList,"List of barcodes of composite samples in a pooled sample",string,NA,"[SPLIT_BY('|')]","[ASCII]",
sls_metagenomicsPooling,compositeSampleID,"Unique identifier for a sample that is a composite of field collected material",string,NA,,"[DOES_NOT_EXIST][MATCH_REGULAR_EXPRESSION('[A-Z]{4}_[0-9]{3}-[M|O]')][MATCH_REGULAR_EXPRESSION('20[0-9]{2}(0[1-9]|1[012])(0[1-9]|1[0-9]|2[0-9]|3[01])-(?i)comp')]","[DEFAULT_TO(plotID + horizon + collectDate)]"
sls_metagenomicsPooling,compositeSampleFate,"Fate of a sample that is a composite of field collected material",string,NA,,"[LOV]","[LOV('active', 'lost', 'discarded')][SUGGESTED_ENTRY('active')]"
sls_metagenomicsPooling,compositeSampleCode,"Barcode for a sample that is a composite of field collected material",string,NA,,"[ASCII]",
sls_metagenomicsPooling,remarks,"Technician notes; free text comments accompanying the record",string,NA,,"[ASCII]","[ASCII]"
sls_metagenomicsPooling,processedBy,"An identifier for the technician who processed the sample(s)",string,NA,,"[ASCII]","[FROM_PERSONNEL][SUGGESTED_ENTRY(previousValue)]"
sls_metagenomicsPooling,recordedBy,"An identifier for the technician who recorded the data",string,NA,,"[ASCII]","[FROM_PERSONNEL][SUGGESTED_ENTRY(previousValue)]"
sls_metagenomicsPooling,sampleCondition,"Condition of a sample",string,NA,,"[LOV]","[REQUIRE][LOV][SUGGESTED_ENTRY('OK')]"
sls_metagenomicsPooling,genomicsDataQF,"Quality flag for genomics sample",string,NA,,"[ASCII]",
sls_bgcSubsampling,uid,"Unique ID within NEON database; an identifier for the record",string,NA,"[CREATE_UID]",,
sls_bgcSubsampling,plotID,"Plot identifier (NEON site code_XXX)",string,NA,"[DERIVE_FROM_SAMPLE_TREE('sls_soilCoreCollection_in.sampleID')]","[NAMED_LOCATION_TYPE('OS Plot - bgc')]","[REQUIRE]"
sls_bgcSubsampling,horizon,"Organic or mineral soil",string,NA,,"[LOV]","[REQUIRE][LOV]"
sls_bgcSubsampling,setDate,"Date that trap was set",dateTime,NA,"[DERIVE_FROM_SAMPLE_TREE('sls_soilCoreCollection_in.sampleID')]",,
sls_bgcSubsampling,collectDate,"Date of the collection event",dateTime,NA,"[DERIVE_FROM_SAMPLE_TREE('sls_soilCoreCollection_in.sampleID')]",,
sls_bgcSubsampling,toxicodendronPossible,"Indicator for whether a sample may contain Toxicodendron spp",string,NA,,"[LOV]","[LOV]"
sls_bgcSubsampling,samplingProtocolVersion,"The NEON document number and version where detailed information regarding the sampling method used is available; format NEON.DOC.######vX",string,NA,,"[LOV]","[LOV]"
sls_bgcSubsampling,sampleID,"Identifier for sample",string,NA,,"[EXISTS]","[REQUIRE]"
sls_bgcSubsampling,sampleFate,"Fate of a sample",string,NA,,"[LOV]","[HIDDEN][DEFAULT_TO('active')]"
sls_bgcSubsampling,sampleCode,"Barcode of a sample",string,NA,,,
sls_bgcSubsampling,cnSampleID,"Identifier for a carbon-nitrogen sample",string,NA,,"[DOES_NOT_EXIST][MATCH_REGULAR_EXPRESSION('[A-Z]{4}_[0-9]{3}-[M|O]')][MATCH_REGULAR_EXPRESSION('-+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)')][MATCH_REGULAR_EXPRESSION('20[0-9]{2}(0[1-9]|1[012])(0[1-9]|1[0-9]|2[0-9]|3[01])-(?i)cn')]","[DEFAULT_TO(sampleID + '-cn')]"
sls_bgcSubsampling,cnSampleFate,"Fate of a carbon-nitrogen sample",string,NA,,"[IF (IS_BLANK(cnSampleID)), REQUIRE_NULL][IF (IS_NOT_BLANK(cnSampleID)), REQUIRE][LOV]","[LOV( 'active', 'lost'][SUGGESTED_ENTRY('active')"
sls_bgcSubsampling,cnSampleCode,"Barcode of a carbon-nitrogen sample",string,NA,,"[ASCII]",
sls_bgcSubsampling,ovenStartDate,"The date and time a sample was placed in the drying oven",dateTime,NA,"[CONVERT_TO_UTC(namedLocation)]","[GREATER_THAN_OR_EQUAL_TO(collectDate-12hr)]","[REQUIRE][DATE_FORMAT(YYYY-MM-DDTHH:MM)][GREATER_THAN_OR_EQUAL_TO(collectDate)]"
sls_bgcSubsampling,ovenEndDate,"The date and time a sample was removed from the drying oven",dateTime,NA,"[CONVERT_TO_UTC(namedLocation)]","[GREATER_THAN_OR_EQUAL_TO(ovenStartDate)]","[DATE_FORMAT(YYYY-MM-DDTHH:MM)][GREATER_THAN_OR_EQUAL_TO(ovenStartDate)]"
sls_bgcSubsampling,bgcArchiveID,"Identifier for a biogeochemistry archive sample",string,NA,,"[DOES_NOT_EXIST][MATCH_REGULAR_EXPRESSION('[A-Z]{4}_[0-9]{3}-[M|O]')][MATCH_REGULAR_EXPRESSION('-+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)+([1-4]*[0-9]{1}-|[1-4]*[0-9]{1}.5-)')][MATCH_REGULAR_EXPRESSION('20[0-9]{2}(0[1-9]|1[012])(0[1-9]|1[0-9]|2[0-9]|3[01])-(?i)ba')]","[EQUALS(sampleID + '-ba')]"
sls_bgcSubsampling,bgcArchiveFate,"Fate of a biogeochemistry archive sample",string,NA,,"[IF (IS_NOT_BLANK(bgcArchiveID)), REQUIRE][LOV]","[LOV( 'active', 'lost'][SUGGESTED_ENTRY('active')]"
sls_bgcSubsampling,bgcArchiveCode,"Barcode of a biogeochemistry archive sample",string,NA,,"[ASCII]",
sls_bgcSubsampling,bgcArchiveMass,"Mass of a biogeochemistry archive sample",real,gram,,"[ASCII][GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(500)]","[GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(500)]"
sls_bgcSubsampling,sampleCondition,"Condition of a sample",string,NA,,"[LOV]","[REQUIRE][LOV][SUGGESTED_ENTRY('OK')]"
sls_bgcSubsampling,bgcRemarks,"Remarks from biogeochemistry subsample processing",string,NA,,"[ASCII]","[IF(sampleCondition='oven temperature out of range'),REQUIRE][IF(sampleCondition='storage temperature out of range'),REQUIRE][ASCII]"
sls_bgcSubsampling,processedBy,"An identifier for the technician who processed the sample(s)",string,NA,,"[ASCII]","[FROM_PERSONNEL][SUGGESTED_ENTRY(previousValue)]"
sls_bgcSubsampling,recordedBy,"An identifier for the technician who recorded the data",string,NA,,"[ASCII]","[FROM_PERSONNEL][SUGGESTED_ENTRY(previousValue)]"
sls_bgcSubsampling,bgcDataQF,"Quality flag for biogeochemistry sample",string,NA,,"[ASCII]",
sls_soilMoisture,uid,"Unique ID within NEON database; an identifier for the record",string,NA,"[CREATE_UID]",,
sls_soilMoisture,plotID,"Plot identifier (NEON site code_XXX)",string,NA,"[DERIVE_FROM_SAMPLE_TREE('sls_soilCoreCollection_in.sampleID')]","[NAMED_LOCATION_TYPE('OS Plot - bgc')]","[REQUIRE]"
sls_soilMoisture,horizon,"Organic or mineral soil",string,NA,,"[LOV]","[REQUIRE][LOV]"
sls_soilMoisture,setDate,"Date that trap was set",dateTime,NA,"[DERIVE_FROM_SAMPLE_TREE('sls_soilCoreCollection_in.sampleID')]",,
sls_soilMoisture,collectDate,"Date of the collection event",dateTime,NA,"[DERIVE_FROM_SAMPLE_TREE('sls_soilCoreCollection_in.sampleID')]",,
sls_soilMoisture,sampleID,"Identifier for sample",string,NA,,"[EXISTS]","[REQUIRE]"
sls_soilMoisture,sampleFate,"Fate of a sample",string,NA,,"[LOV]","[HIDDEN][DEFAULT_TO('active')]"
sls_soilMoisture,sampleCode,"Barcode of a sample",string,NA,,"[ASCII]",
sls_soilMoisture,moistureSampleID,"Identifier of moisture sample",string,NA,,"[DOES_NOT_EXIST][ASCII]","[DEFAULT_TO(sampleID + '-sm')]"
sls_soilMoisture,moistureSampleFate,"Fate of moisture sample",string,NA,,"[LOV]","[LOV( 'discarded', 'lost'][SUGGESTED_ENTRY('discarded')]"
sls_soilMoisture,moistureSampleCode,"Barcode of moisture subsample",string,NA,,"[ASCII]",
sls_soilMoisture,samplingProtocolVersion,"The NEON document number and version where detailed information regarding the sampling method used is available; format NEON.DOC.######vX",string,NA,,"[LOV]","[REQUIRE][LOV][SUGGESTED_ENTRY(previousValue)]"
sls_soilMoisture,boatMass,"Mass of the weigh boat",real,gram,,"[GREATER_THAN(0)][LESS_THAN_OR_EQUAL_TO(100)]","[WARN][GREATER_THAN(0)][LESS_THAN_OR_EQUAL_TO(100)][REQUIRE]"
sls_soilMoisture,freshMassBoatMass,"Combined mass of a fresh sample and weigh boat",real,gram,,"[IF(moistureSampleFate!='lost'),REQUIRE][GREATER_THAN(boatMass)]","[WARN][GREATER_THAN(boatMass)]"
sls_soilMoisture,ovenStartDate,"The date and time a sample was placed in the drying oven",dateTime,NA,"[CONVERT_TO_UTC(namedLocation)]","[GREATER_THAN_OR_EQUAL_TO(collectDate-12hr)]","[DATE_FORMAT(YYYY-MM-DDTHH:MM)][GREATER_THAN_OR_EQUAL_TO(collectDate)]"
sls_soilMoisture,ovenEndDate,"The date and time a sample was removed from the drying oven",dateTime,NA,"[CONVERT_TO_UTC(namedLocation)]","[GREATER_THAN_OR_EQUAL_TO(ovenStartDate)]","[DATE_FORMAT(YYYY-MM-DDTHH:MM)][GREATER_THAN_OR_EQUAL_TO(ovenStartDate)]"
sls_soilMoisture,dryMassBoatMass,"Oven-dried mass of the sample and weigh boat",real,gram,,"[IF(moistureSampleFate!='lost'),REQUIRE][GREATER_THAN_OR_EQUAL_TO(boatMass)][LESS_THAN_OR_EQUAL_TO(freshMassBoatMass)]","[GREATER_THAN_OR_EQUAL_TO(boatMass)][LESS_THAN_OR_EQUAL_TO(freshMassBoatMass)]"
sls_soilMoisture,soilMoisture,"Gravimetric water content of soil in grams of water per gram dry soil",real,gramsPerGram,"((freshMassBoatMass-boatMass)-(dryMassBoatMass-boatMass))/(dryMassBoatMass-boatMass)",,
sls_soilMoisture,dryMassFraction,"Dry mass divided by fresh mass of a sample",real,NA,"(dryMassBoatMass-boatMass)/(freshMassBoatMass-boatMass)","[ASCII]",
sls_soilMoisture,smRemarks,"Remarks from measurement of sample gravimetric soil moisture",string,NA,,"[ASCII]","[ASCII]"
sls_soilMoisture,smMeasuredBy,"An identifier for the technician who measured or collected the soil moisture data",string,NA,,"[ASCII]","[FROM_PERSONNEL][SUGGESTED_ENTRY(previousValue)]"
sls_soilMoisture,recordedBy,"An identifier for the technician who recorded the data",string,NA,,"[ASCII]","[FROM_PERSONNEL][SUGGESTED_ENTRY(previousValue)]"
sls_soilMoisture,smDataQF,"Quality flag for soil moisture measurement",string,NA,,"[ASCII]",
sls_soilpH,uid,"Unique ID within NEON database; an identifier for the record",string,NA,"[CREATE_UID]",,
sls_soilpH,plotID,"Plot identifier (NEON site code_XXX)",string,NA,"[DERIVE_FROM_SAMPLE_TREE('sls_soilCoreCollection_in.sampleID')]","[NAMED_LOCATION_TYPE('OS Plot - bgc')]","[REQUIRE]"
sls_soilpH,horizon,"Organic or mineral soil",string,NA,,"[LOV]","[LOV]"
sls_soilpH,setDate,"Date that trap was set",dateTime,NA,"[DERIVE_FROM_SAMPLE_TREE('sls_soilCoreCollection_in.sampleID')]",,
sls_soilpH,collectDate,"Date of the collection event",dateTime,NA,"[DERIVE_FROM_SAMPLE_TREE('sls_soilCoreCollection_in.sampleID')]",,
sls_soilpH,processedDate,"Date or date and time of processing event",dateTime,NA,"[CONVERT_TO_UTC(namedLocation)]",,"[WARN][DATE_FORMAT(YYYY-MM-DDTHH:MM)][GREATER_THAN_OR_EQUAL_TO(collectDate)]"
sls_soilpH,sampleID,"Identifier for sample",string,NA,,"[EXISTS]","[REQUIRE]"
sls_soilpH,sampleFate,"Fate of a sample",string,NA,,"[LOV]","[HIDDEN][DEFAULT_TO('active')]"
sls_soilpH,sampleCode,"Barcode of a sample",string,NA,,,
sls_soilpH,pHSampleID,"Identifier for pH sample",string,NA,,"[DOES_NOT_EXIST][ASCII]","[DEFAULT_TO(sampleID + '-pH')]"
sls_soilpH,pHSampleFate,"Fate of pH sample",string,NA,,"[LOV]","[LOV( 'discarded', 'consumed', 'lost'][SUGGESTED_ENTRY('discarded')]"
sls_soilpH,pHSampleCode,"Barcode of pH sample",string,NA,,"[ASCII]",
sls_soilpH,samplingProtocolVersion,"The NEON document number and version where detailed information regarding the sampling method used is available; format NEON.DOC.######vX",string,NA,,"[LOV]","[REQUIRE][LOV]"
sls_soilpH,pHSoilInWaterMass,"Mass of soil used to analyze pH in water solution",real,gram,,"[GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(100)]","[WARN][GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(50)]"
sls_soilpH,pHWaterVol,"Volume of water used for pH measurement",real,milliliter,,"[GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(100)]","[WARN][GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(100)]"
sls_soilpH,soilInWaterpH,"pH value of soil measured in water solution",real,pH,,"[IF(pHSampleFate!='lost' AND IS_BLANK(soilInCaClpH)), REQUIRE][GREATER_THAN_OR_EQUAL_TO(2)][LESS_THAN_OR_EQUAL_TO(11)]","[GREATER_THAN_OR_EQUAL_TO(2)][LESS_THAN_OR_EQUAL_TO(11)]"
sls_soilpH,waterpHRatio,"Ratio of water to soil for pH measurement",real,NA,"[pHWaterVol/pHSoilInWaterMass]",,
sls_soilpH,pHSoilInCaClMass,"Mass of soil used to analyze pH in calcium chloride solution",real,gram,,"[GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(100)]","[EQUALS(pHSoilInWaterMass)]"
sls_soilpH,pHCaClVol,"Volume of water used for CaCl measurement",real,milliliter,,"[GREATER_THAN_OR_EQUAL_TO(0)][LESS_THAN_OR_EQUAL_TO(100)]","[EQUALS(pHWaterVol+'vol of CaCl2 added')]"
sls_soilpH,soilInCaClpH,"pH value of soil measured in calcium chloride solution",real,pH,,"[IF(pHSampleFate!='lost'), REQUIRE][GREATER_THAN_OR_EQUAL_TO(2)][LESS_THAN_OR_EQUAL_TO(11)]","[IF(pHSampleFate!='lost'), REQUIRE][GREATER_THAN_OR_EQUAL_TO(2)][LESS_THAN_OR_EQUAL_TO(11)]"
sls_soilpH,caclpHRatio,"Ratio of calcium chloride to soil for pH measurement",real,NA,"[pHCaClVol/pHSoilInCaClMass]",,
sls_soilpH,pHRemarks,"Remarks from measurement of sample pH",string,NA,,"[ASCII]","[ASCII]"
sls_soilpH,pHMeasuredBy,"An identifier for the technician who measured or collected the pH data",string,NA,,"[ASCII]","[FROM_PERSONNEL][SUGGESTED_ENTRY(previousValue)]"
sls_soilpH,recordedBy,"An identifier for the technician who recorded the data",string,NA,,"[ASCII]","[FROM_PERSONNEL][SUGGESTED_ENTRY(previousValue)]"
sls_soilpH,pHDataQF,"Quality flag for pH measurement",string,NA,,"[ASCII]",
